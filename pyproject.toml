[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gw150914-mcp-signal-search"
version = "0.1.0"
description = "Gravitational wave signal search and optimization using MCP (Model Context Protocol)"
authors = [
    {name = "GW Research Team", email = "research@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",

    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Astronomy",
]
keywords = ["gravitational-waves", "signal-processing", "mcp", "optimization"]

dependencies = [
    # Core MCP dependencies
    "mcp>=1.0.0",
    
    # Scientific computing
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    
    # Gravitational wave analysis
    "gwpy>=3.0.0",
    "pycbc>=2.1.0",
    
    # Data visualization
    "matplotlib>=3.5.0",
    
    # AI/ML integration
    "openai>=1.0.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    
    # Async support
    "asyncio-mqtt>=0.11.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
    "pre-commit>=2.17.0",
]

jupyter = [
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "notebook>=6.4.0",
]

docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.17.0",
]

[project.urls]
Homepage = "https://github.com/username/gw150914-mcp-signal-search"
Documentation = "https://gw150914-mcp-signal-search.readthedocs.io/"
Repository = "https://github.com/username/gw150914-mcp-signal-search.git"
"Bug Tracker" = "https://github.com/username/gw150914-mcp-signal-search/issues"

[project.scripts]
gw-optimization-client = "mcp_client.gw_optimization_client:main"
gw-analysis-server = "mcp_server.gw_analysis_server:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["mcp_client*", "mcp_server*"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml", "*.toml"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["mcp_client", "mcp_server"]

# mypy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["mcp_client", "mcp_server"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
